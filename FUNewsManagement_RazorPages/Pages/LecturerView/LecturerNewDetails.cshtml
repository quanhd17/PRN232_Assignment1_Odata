@page
@model LecturerNewDetailsModel
@{
    ViewData["Title"] = "News Details";
}

<div class="container mt-4">
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a asp-page="LecturerNews">News</a></li>
            <li class="breadcrumb-item active" aria-current="page">@Model.NewsArticle?.NewsTitle</li>
        </ol>
    </nav>

    @if (Model.NewsArticle != null)
    {
        <div class="row">
            <div class="col-lg-8">
                <!-- Main Content -->
                <article class="bg-white rounded-3 shadow-sm p-4 mb-4">
                    <header class="mb-4">
                        <h1 class="display-5 fw-bold text-dark mb-3">@Model.NewsArticle.NewsTitle</h1>
                        <div class="d-flex align-items-center text-muted mb-3">
                            <i class="fas fa-calendar me-2"></i>
                            <span>@Model.NewsArticle.CreatedDate?.ToString("dd/MM/yyyy HH:mm")</span>
                            @if (Model.NewsArticle.ModifiedDate.HasValue)
                            {
                                <span class="mx-2">â€¢</span>
                                <i class="fas fa-edit me-2"></i>
                                <span>Updated: @Model.NewsArticle.ModifiedDate?.ToString("dd/MM/yyyy HH:mm")</span>
                            }
                        </div>
                        
                        @if (!string.IsNullOrEmpty(Model.NewsArticle.Headline))
                        {
                            <div class="alert alert-info border-0 bg-light">
                                <h5 class="mb-0"><i class="fas fa-quote-left me-2"></i>@Model.NewsArticle.Headline</h5>
                            </div>
                        }
                    </header>

                    <div class="news-content mb-4">
                        @if (!string.IsNullOrEmpty(Model.NewsArticle.NewsContent))
                        {
                            <div class="content-text">
                                @Html.Raw(Model.NewsArticle.NewsContent.Replace("\n", "<br>"))
                            </div>
                        }
                        else
                        {
                            <div class="text-muted fst-italic">No content available.</div>
                        }
                    </div>

                    @if (!string.IsNullOrEmpty(Model.NewsArticle.NewsSource))
                    {
                        <footer class="border-top pt-3">
                            <div class="d-flex align-items-center text-muted">
                                <i class="fas fa-link me-2"></i>
                                <span>Source: @Model.NewsArticle.NewsSource</span>
                            </div>
                        </footer>
                    }
                </article>

                <!-- Comments Section -->
                <div class="bg-white rounded-3 shadow-sm p-4 mb-4">
                    <h4 class="mb-3">
                        <i class="fas fa-comments me-2"></i>
                        Comments
                    </h4>
                    
                    <!-- Add Comment Form -->
                    <div class="mb-4">
                        <form id="comment-form" class="needs-validation" novalidate>
                            <div class="mb-3">
                                <label for="commentContent" class="form-label">Add a comment:</label>
                                <textarea class="form-control" id="commentContent" rows="3" placeholder="Share your thoughts..." required></textarea>
                                <div class="invalid-feedback">
                                    Please enter a comment.
                                </div>
                            </div>
                            <div class="d-flex justify-content-between align-items-center">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="anonymousComment">
                                    <label class="form-check-label" for="anonymousComment">
                                        Post anonymously
                                    </label>
                                    <small class="form-text text-muted d-block">
                                        <i class="fas fa-info-circle me-1"></i>
                                        Anonymous comments will be posted under "Anonymous" name
                                    </small>
                                </div>
                                <button type="submit" class="btn btn-primary">
                                    <i class="fas fa-paper-plane me-2"></i>
                                    Post Comment
                                </button>
                            </div>
                        </form>
                    </div>

                    <!-- Comments List -->
                    <div id="comments-container">
                        <!-- Comments will be loaded here via JavaScript -->
                        <div class="text-center text-muted">
                            <i class="fas fa-spinner fa-spin me-2"></i>
                            Loading comments...
                        </div>
                    </div>
                    
                    <!-- Notifications Area -->
                    <div id="notifications-area" class="mt-3">
                        <!-- Success/Error messages will appear here -->
                    </div>
                </div>

            </div>

            <div class="col-lg-4">
                <!-- Sidebar -->
                <div class="sticky-top" style="top: 2rem;">
                    <!-- Article Info -->
                    <div class="bg-white rounded-3 shadow-sm p-4 mb-4">
                        <h5 class="mb-3">
                            <i class="fas fa-info-circle me-2"></i>
                            Article Information
                        </h5>
                        <ul class="list-unstyled">
                            <li class="mb-2">
                                <strong>Category:</strong>
                                @{
                                    var currentCategory = Model.Categories.FirstOrDefault(c => c.CategoryId == Model.NewsArticle.CategoryId);
                                }
                                <span class="badge bg-primary ms-2">@(currentCategory?.CategoryName ?? "Uncategorized")</span>
                            </li>
                            <li class="mb-2">
                                <strong>Status:</strong>
                                @if (Model.NewsArticle.NewsStatus == true)
                                {
                                    <span class="badge bg-success ms-2">Published</span>
                                }
                                else
                                {
                                    <span class="badge bg-warning ms-2">Draft</span>
                                }
                            </li>
                            <li class="mb-2">
                                <strong>Created:</strong>
                                <span class="text-muted ms-2">@Model.NewsArticle.CreatedDate?.ToString("dd/MM/yyyy")</span>
                            </li>
                            @if (Model.NewsArticle.ModifiedDate.HasValue)
                            {
                                <li class="mb-2">
                                    <strong>Last Modified:</strong>
                                    <span class="text-muted ms-2">@Model.NewsArticle.ModifiedDate?.ToString("dd/MM/yyyy")</span>
                                </li>
                            }
                        </ul>
                    </div>



                    <!-- Tags -->
                    @if (Model.NewsArticle.Tags != null && Model.NewsArticle.Tags.Any())
                    {
                        <div class="bg-white rounded-3 shadow-sm p-4 mb-4">
                            <h5 class="mb-3">
                                <i class="fas fa-tags me-2"></i>
                                Tags
                            </h5>
                            <div class="d-flex flex-wrap gap-2">
                                @foreach (var tag in Model.NewsArticle.Tags)
                                {
                                    <span class="badge bg-secondary">@tag.TagName</span>
                                }
                            </div>
                        </div>
                    }

                    <!-- Actions -->
                    <div class="bg-white rounded-3 shadow-sm p-4">
                        <h5 class="mb-3">
                            <i class="fas fa-cogs me-2"></i>
                            Actions
                        </h5>
                        <div class="d-grid gap-2">
                            <a asp-page="LecturerNews" class="btn btn-outline-primary">
                                <i class="fas fa-arrow-left me-2"></i>
                                Back to News
                            </a>                          
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="text-center py-5">
            <div class="alert alert-warning" role="alert">
                <h4 class="alert-heading">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    Article Not Found
                </h4>
                <p>The requested news article could not be found or may have been removed.</p>
                <hr>
                <a asp-page="LecturerNews" class="btn btn-primary">
                    <i class="fas fa-arrow-left me-2"></i>
                    Back to News
                </a>
            </div>
        </div>
    }
</div>

<style>
    .news-content {
        font-size: 1.1rem;
        line-height: 1.8;
    }
    
    .content-text {
        text-align: justify;
    }
    

    
    .sticky-top {
        z-index: 1020;
    }
    
    .comment-item:last-child {
        border-bottom: none !important;
    }
    
    .comment-item {
        transition: all 0.2s ease;
    }
    
    .comment-item:hover {
        background-color: #f8f9fa;
        border-radius: 8px;
        padding: 8px;
        margin: -8px;
    }
    
    .comment-edit-form {
        background-color: #f8f9fa;
        border-radius: 8px;
        padding: 15px;
        margin-top: 10px;
    }
    
    .badge-sm {
        font-size: 0.75em;
        padding: 0.25em 0.5em;
    }
    
    .btn-group-sm .btn {
        padding: 0.25rem 0.5rem;
        font-size: 0.875rem;
    }
    
    #comment-form {
        background-color: #f8f9fa;
        border-radius: 8px;
        padding: 20px;
        border: 1px solid #dee2e6;
    }
    
    .alert {
        margin-bottom: 1rem;
    }
    

    
</style>

<script>
    let currentArticleId = @(Model.NewsArticle?.NewsArticleId ?? 0);
    let currentUserId = 1; // This should come from your authentication system

    // Initialize when page loads
    document.addEventListener('DOMContentLoaded', function() {
        if (currentArticleId > 0) {
            loadComments(currentArticleId);
            setupCommentForm();
        }
    });

    // Setup comment form
    function setupCommentForm() {
        const form = document.getElementById('comment-form');
        form.addEventListener('submit', handleCommentSubmit);
    }

    // Handle comment form submission
    async function handleCommentSubmit(event) {
        event.preventDefault();
        
        const form = event.target;
        const content = document.getElementById('commentContent').value.trim();
        const isAnonymous = document.getElementById('anonymousComment').checked;
        
        if (!content) {
            form.classList.add('was-validated');
            return;
        }

        const submitBtn = form.querySelector('button[type="submit"]');
        const originalText = submitBtn.innerHTML;
        submitBtn.disabled = true;
        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Posting...';

        try {
            const commentData = {
                newsArticleId: currentArticleId,
                accountId: isAnonymous ? -1 : currentUserId, // Use -1 to indicate anonymous
                content: content,
                createdDate: new Date().toISOString(),
                isActive: true
            };

            const response = await fetch('https://localhost:7130/odata/Comments', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(commentData)
            });

            if (response.ok) {
                // Clear form
                document.getElementById('commentContent').value = '';
                document.getElementById('anonymousComment').checked = false;
                form.classList.remove('was-validated');
                
                // Reload comments
                await loadComments(currentArticleId);
                
                // Show success message
                showAlert('Comment posted successfully!', 'success');
            } else {
                throw new Error('Failed to post comment');
            }
        } catch (error) {
            console.error('Error posting comment:', error);
            showAlert('Failed to post comment. Please try again.', 'danger');
        } finally {
            submitBtn.disabled = false;
            submitBtn.innerHTML = originalText;
        }
    }

    // Load comments
    async function loadComments(articleId) {
        try {
            const response = await fetch(`https://localhost:7130/odata/Comments/GetByArticleId(articleId=${articleId})`);
            const data = await response.json();
            
            console.log('Comments API response:', data); // Debug log
            
            const commentsContainer = document.getElementById('comments-container');
            
            if (data.value && data.value.length > 0) {
                let commentsHtml = '';
                data.value.forEach((comment, index) => {
                    try {
                        console.log(`Processing comment ${index}:`, comment); // Debug log
                        
                        const commentDate = new Date(comment.createdDate || comment.CreatedDate || new Date()).toLocaleString('en-GB', {
                            day: '2-digit',
                            month: '2-digit',
                            year: 'numeric',
                            hour: '2-digit',
                            minute: '2-digit'
                        });
                        
                        const commentAccountId = comment.accountId || comment.AccountId;
                        const isOwner = commentAccountId === currentUserId;
                        const authorName = comment.account?.accountName || comment.Account?.AccountName || 
                                         (commentAccountId === 1 ? 'Anonymous' : 'Unknown User');
                        
                        // Handle different possible property names for content
                        const safeContent = comment.content || comment.Content || '';
                        const escapedContent = safeContent.replace(/'/g, "\\'");
                    
                    const commentId = comment.commentId || comment.CommentId;
                    commentsHtml += `
                        <div class="comment-item border-bottom pb-3 mb-3" data-comment-id="${commentId}">
                            <div class="d-flex justify-content-between align-items-start mb-2">
                                <div class="d-flex align-items-center">
                                    <div class="fw-bold me-2">${authorName}</div>
                                    ${isOwner ? '<span class="badge bg-primary badge-sm">You</span>' : ''}
                                </div>
                                <div class="d-flex align-items-center">
                                    <small class="text-muted me-2">${commentDate}</small>
                                    ${isOwner ? `
                                        <div class="btn-group btn-group-sm">
                                            <button class="btn btn-outline-secondary btn-sm" onclick="editComment(${commentId}, '${escapedContent}')" title="Edit">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button class="btn btn-outline-danger btn-sm" onclick="deleteComment(${commentId})" title="Delete">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </div>
                                    ` : ''}
                                </div>
                            </div>
                            <div class="comment-content" id="comment-content-${commentId}">
                                ${safeContent.replace(/\n/g, '<br>')}
                            </div>
                            <div class="comment-edit-form d-none" id="comment-edit-${commentId}">
                                <textarea class="form-control mb-2" rows="3">${safeContent}</textarea>
                                <div class="d-flex gap-2">
                                    <button class="btn btn-primary btn-sm" onclick="saveCommentEdit(${commentId})">
                                        <i class="fas fa-save me-1"></i>Save
                                    </button>
                                    <button class="btn btn-secondary btn-sm" onclick="cancelCommentEdit(${commentId})">
                                        <i class="fas fa-times me-1"></i>Cancel
                                    </button>
                                </div>
                            </div>
                        </div>
                    `;
                    } catch (commentError) {
                        console.error(`Error processing comment ${index}:`, commentError, comment);
                        // Continue with other comments even if one fails
                    }
                });
                
                commentsContainer.innerHTML = commentsHtml;
            } else {
                commentsContainer.innerHTML = `
                    <div class="text-center text-muted py-3">
                        <i class="fas fa-comment-slash me-2"></i>
                        No comments yet. Be the first to comment!
                    </div>
                `;
            }
        } catch (error) {
            console.error('Error loading comments:', error);
            document.getElementById('comments-container').innerHTML = `
                <div class="text-center text-danger py-3">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    Error loading comments. Please try again later.
                </div>
            `;
        }
    }

    // Edit comment
    function editComment(commentId, content) {
        const contentDiv = document.getElementById(`comment-content-${commentId}`);
        const editForm = document.getElementById(`comment-edit-${commentId}`);
        
        contentDiv.classList.add('d-none');
        editForm.classList.remove('d-none');
        
        const textarea = editForm.querySelector('textarea');
        textarea.value = content;
        textarea.focus();
    }

    // Cancel comment edit
    function cancelCommentEdit(commentId) {
        const contentDiv = document.getElementById(`comment-content-${commentId}`);
        const editForm = document.getElementById(`comment-edit-${commentId}`);
        
        contentDiv.classList.remove('d-none');
        editForm.classList.add('d-none');
    }

    // Save comment edit
    async function saveCommentEdit(commentId) {
        const editForm = document.getElementById(`comment-edit-${commentId}`);
        const textarea = editForm.querySelector('textarea');
        const newContent = textarea.value.trim();
        
        if (!newContent) {
            showAlert('Comment cannot be empty.', 'warning');
            return;
        }

        try {
            const response = await fetch(`https://localhost:7130/odata/Comments(${commentId})`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    commentId: commentId,
                    content: newContent
                })
            });

            if (response.ok) {
                await loadComments(currentArticleId);
                showAlert('Comment updated successfully!', 'success');
            } else {
                throw new Error('Failed to update comment');
            }
        } catch (error) {
            console.error('Error updating comment:', error);
            showAlert('Failed to update comment. Please try again.', 'danger');
        }
    }

    // Delete comment
    async function deleteComment(commentId) {
        if (!confirm('Are you sure you want to delete this comment?')) {
            return;
        }

        try {
            const response = await fetch(`https://localhost:7130/odata/Comments(${commentId})`, {
                method: 'DELETE'
            });

            if (response.ok) {
                await loadComments(currentArticleId);
                showAlert('Comment deleted successfully!', 'success');
            } else {
                throw new Error('Failed to delete comment');
            }
        } catch (error) {
            console.error('Error deleting comment:', error);
            showAlert('Failed to delete comment. Please try again.', 'danger');
        }
    }

    // Show alert message
    function showAlert(message, type) {
        const alertDiv = document.createElement('div');
        alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
        alertDiv.innerHTML = `
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
        
        const notificationsArea = document.getElementById('notifications-area');
        notificationsArea.appendChild(alertDiv);
        
        // Auto-dismiss after 5 seconds
        setTimeout(() => {
            if (alertDiv.parentNode) {
                alertDiv.remove();
            }
        }, 5000);
    }
</script> 